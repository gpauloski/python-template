{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Package Template Repo","text":"<p>Python package template repo that provides: - Package, examples, and testing layout. - GitHub PR and Issue templates. - Example docs with MKDocs and GitHub Pages. - CI framework with <code>pre-commit</code> and <code>tox</code>. - GitHub actions for running tests and publishing packages.</p> <p>This package setup was based on Anthony Sottile's project setup but deviates in some places (e.g., <code>pyproject.toml</code> and <code>ruff</code>).</p>"},{"location":"#setup-instructions","title":"Setup Instructions","text":"<ol> <li>Click the \"Use this template\" button at the top right of this page.</li> <li>Delete and directories you will not be using (commonly <code>docs/</code> if you do not want to use MKDocs or <code>examples/</code> if you will not have example code).</li> <li>Follow the instructions to create the new repo then clone your repo locally.</li> <li>The template uses \"foobar\" to indicate things that need to be changed.    Start by searching for all instances (<code>git grep foobar</code>) and changing them accordingly.</li> <li>Configure pre-commit:<ul> <li>Go to https://pre-commit.ci/ and enable pre-commit on your repo.</li> <li>Update the pre-commit badge URL in this README with your new badge URL.</li> </ul> </li> <li>Configure GitHub pages:<ul> <li>Go to the \"Pages\" section of your repository settings.</li> <li>Select \"Deploy from a branch\" and use the \"gh-pages\" branch.</li> </ul> </li> <li>Configure PyPI releases (if relevant):<ul> <li>Create a new API token for https://pypi.org/.</li> <li>Add the token as a GitHub actions secret (see the instructions here).</li> </ul> </li> <li>Delete this boilerplate stuff in the README.</li> <li>Commit and push changes.</li> </ol>"},{"location":"#github-configuration","title":"GitHub Configuration","text":"<p>I recommend making a few other changes to the repo's setting on GitHub. - In \"General\"   - Select/deselect features you need/don't need.   - Select \"Automatically delete head branches - In \"Branches\": enable branch protection on <code>main</code>.   - Check \"Require a pull request before merging\"   - Check \"Require status checks to pass before merging\"     - Check \"Require branches to be up to date before merging\"     - Set required checks (e.g., pre-commit.ci, tests, etc.)   - Check \"Do not allow bypassing the above settings\"</p>"},{"location":"#installation","title":"Installation","text":"<p>Install via pip: <pre><code>$ pip install foobar\n</code></pre></p> <p>For local development: <pre><code>$ tox --devenv venv -e py310\n$ pre-commit install\n</code></pre> or <pre><code>$ pip install -e .\n</code></pre></p>"},{"location":"#additional-readme-sections","title":"Additional README Sections","text":"<p>...</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#foobar","title":"foobar","text":"<p>foobar can be used as follows.</p> <pre><code>from foobar import foo\n\nfoo.bar([1, 2, 3])\n# output: 6\n</code></pre>"},{"location":"get-started/","title":"Quick Start","text":"<p>foobar brief description.</p>"},{"location":"get-started/#overview","title":"Overview","text":"<p>foobar detailed overview.</p>"},{"location":"get-started/#installation","title":"Installation","text":"<pre><code>$ pip install foobar\n</code></pre> <p>Documentation on installing for local development is provided in Contributing.</p>"},{"location":"get-started/#usage","title":"Usage","text":"<p>foobar usage example.</p>"},{"location":"installation/","title":"Installation","text":"<pre><code>$ pip install foobar\n</code></pre>"},{"location":"known-issues/","title":"Known Issues","text":"<ul> <li>First known issue.</li> <li>Second known issue.</li> </ul>"},{"location":"api/","title":"foobar","text":"<p>       Source file: foobar/__init__.py </p> <p>foobar package.</p>"},{"location":"api/SUMMARY/","title":"SUMMARY","text":"<ul> <li>foobar<ul> <li>foobar.foo</li> </ul> </li> </ul>"},{"location":"api/foo/","title":"foobar.foo","text":"<p>       Source file: foobar/foo.py </p> <p>foo module.</p>"},{"location":"api/foo/#foobar.foo.bar","title":"bar()","text":"<pre><code>&lt;div class=\"doc-signature highlight\"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span id=\"__span-0-1\"&gt;&lt;a id=\"__codelineno-0-1\" name=\"__codelineno-0-1\" href=\"#__codelineno-0-1\"&gt;&lt;/a&gt;&lt;span class=\"n\"&gt;bar&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"n\"&gt;data&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"o\"&gt;&lt;&lt;/span&gt;&lt;span class=\"n\"&gt;span&lt;/span&gt; &lt;span class=\"n\"&gt;data&lt;/span&gt;&lt;span class=\"o\"&gt;-&lt;/span&gt;&lt;span class=\"n\"&gt;autorefs&lt;/span&gt;&lt;span class=\"o\"&gt;-&lt;/span&gt;&lt;span class=\"n\"&gt;optional&lt;/span&gt;&lt;span class=\"o\"&gt;=&lt;/span&gt;&lt;span class=\"s2\"&gt;\"list\"&lt;/span&gt;&lt;span class=\"o\"&gt;&gt;&lt;/span&gt;&lt;span class=\"nb\"&gt;list&lt;/span&gt;&lt;span class=\"o\"&gt;&lt;/&lt;/span&gt;&lt;span class=\"n\"&gt;span&lt;/span&gt;&lt;span class=\"o\"&gt;&gt;&lt;/span&gt;&lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"o\"&gt;&lt;&lt;/span&gt;&lt;span class=\"n\"&gt;span&lt;/span&gt; &lt;span class=\"n\"&gt;data&lt;/span&gt;&lt;span class=\"o\"&gt;-&lt;/span&gt;&lt;span class=\"n\"&gt;autorefs&lt;/span&gt;&lt;span class=\"o\"&gt;-&lt;/span&gt;&lt;span class=\"n\"&gt;optional&lt;/span&gt;&lt;span class=\"o\"&gt;=&lt;/span&gt;&lt;span class=\"s2\"&gt;\"int\"&lt;/span&gt;&lt;span class=\"o\"&gt;&gt;&lt;/span&gt;&lt;span class=\"nb\"&gt;int&lt;/span&gt;&lt;span class=\"o\"&gt;&lt;/&lt;/span&gt;&lt;span class=\"n\"&gt;span&lt;/span&gt;&lt;span class=\"o\"&gt;&gt;&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;|&lt;/span&gt; &lt;span class=\"kc\"&gt;None&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"kc\"&gt;None&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"o\"&gt;-&gt;&lt;/span&gt; &lt;span class=\"o\"&gt;&lt;&lt;/span&gt;&lt;span class=\"n\"&gt;span&lt;/span&gt; &lt;span class=\"n\"&gt;data&lt;/span&gt;&lt;span class=\"o\"&gt;-&lt;/span&gt;&lt;span class=\"n\"&gt;autorefs&lt;/span&gt;&lt;span class=\"o\"&gt;-&lt;/span&gt;&lt;span class=\"n\"&gt;optional&lt;/span&gt;&lt;span class=\"o\"&gt;=&lt;/span&gt;&lt;span class=\"s2\"&gt;\"int\"&lt;/span&gt;&lt;span class=\"o\"&gt;&gt;&lt;/span&gt;&lt;span class=\"nb\"&gt;int&lt;/span&gt;&lt;span class=\"o\"&gt;&lt;/&lt;/span&gt;&lt;span class=\"n\"&gt;span&lt;/span&gt;&lt;span class=\"o\"&gt;&gt;&lt;/span&gt; &lt;span class=\"o\"&gt;|&lt;/span&gt; &lt;span class=\"kc\"&gt;None&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;\n&lt;/span&gt;&lt;span id=\"__span-0-2\"&gt;&lt;a id=\"__codelineno-0-2\" name=\"__codelineno-0-2\" href=\"#__codelineno-0-2\"&gt;&lt;/a&gt;    &lt;span class=\"n\"&gt;data&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"n\"&gt;&lt;span data-autorefs-optional=\"list\"&gt;list&lt;/span&gt;&lt;/span&gt;&lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"n\"&gt;&lt;span data-autorefs-optional=\"int\"&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;|&lt;/span&gt; &lt;span class=\"kc\"&gt;None&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"kc\"&gt;None&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;\n&lt;/span&gt;&lt;span id=\"__span-0-3\"&gt;&lt;a id=\"__codelineno-0-3\" name=\"__codelineno-0-3\" href=\"#__codelineno-0-3\"&gt;&lt;/a&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"o\"&gt;-&gt;&lt;/span&gt; &lt;span class=\"n\"&gt;&lt;span data-autorefs-optional=\"int\"&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span class=\"o\"&gt;|&lt;/span&gt; &lt;span class=\"kc\"&gt;None&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;\n</code></pre> <p>Sum list of integers.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>(list[int], None)</code>, default:                 <code>None</code> )         \u2013          <p>optional list of integers (default: None).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int | None</code>         \u2013          <p><code>None</code> if <code>data=None</code> else the integer sum of <code>data</code>.</p> </li> </ul> Source code in <code>foobar/foo.py</code> <pre><code>def bar(data: list[int] | None = None) -&gt; int | None:\n    \"\"\"Sum list of integers.\n\n    Args:\n        data (list[int], None): optional list of integers (default: None).\n\n    Returns:\n        `None` if `data=None` else the integer sum of `data`.\n    \"\"\"\n    if data is not None:\n        return sum(data)\n    return None\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#getting-started-for-local-development","title":"Getting Started for Local Development","text":"<p>We recommend using Tox to setup the development environment. This will create a new virtual environment with all of the required packages installed and FooBar installed in editable mode with the necessary extras options.</p> <pre><code>$ git clone https://github.com/foobar-author/foobar\n$ cd foobar\n$ tox --devenv venv -e py310\n$ . venv/bin/activate\n</code></pre> <p>Warning</p> <p>Running Tox in a Conda environment is possible but it may conflict with Tox's ability to find the correct Python versions. E.g., if your Conda environment is Python 3.9, running <code>$ tox -e p38</code> may still use Python 3.9.</p> <p>To install manually: <pre><code>$ git clone https://github.com/foobar-author/foobar\n$ cd foobar\n$ python -m venv venv\n$ . venv/bin/activate\n$ pip install -e .[dev,docs]\n</code></pre></p>"},{"location":"contributing/#continuous-integration","title":"Continuous Integration","text":"<p>FooBar uses pre-commit and Tox for continuous integration (test, linting, etc.).</p>"},{"location":"contributing/#linting-and-type-checking-pre-commit","title":"Linting and Type Checking (pre-commit)","text":"<p>To use pre-commit, install the hook and then run against files.</p> <pre><code>$ pre-commit install\n$ pre-commit run --all-files\n</code></pre>"},{"location":"contributing/#tests-tox","title":"Tests (tox)","text":"<p>The entire CI workflow can be run with <code>$ tox</code>. This will test against multiple versions of Python and can be slow.</p> <p>Module-level unit-test are located in the <code>tests/</code> directory and its structure is intended to match that of <code>foobar/</code>. E.g. the tests for <code>foobar/x/y.py</code> are located in <code>tests/x/y_test.py</code>; however, additional test files can be added as needed. Tests should be narrowly focused and target a single aspect of the code's functionality, tests should not test internal implementation details of the code, and tests should not be dependent on the order in which they are run.</p> <p>Code that is useful for building tests but is not a test itself belongs in the <code>testing/</code> directory.</p> <pre><code># Run all tests in tests/\n$ tox -e py39\n# Run a specific test\n$ tox -e py39 -- tests/x/y_test.py::test_z\n</code></pre>"},{"location":"contributing/#docs","title":"Docs","text":"<p>If code changes require an update to the documentation (e.g., for function signature changes, new modules, etc.), the documentation can be built using MKDocs.</p> <pre><code># Manually\n$ pip install -e .[docs]\n$ mkdocs build --strict  # Build only to site/index.html\n$ mkdocs serve           # Serve locally\n\n# With tox (will only build, does not serve)\n$ tox -e docs\n</code></pre> <p>Docstrings are automatically generated, but it is recommended to check the generated docstrings to make sure details/links/etc. are correct.</p>"},{"location":"contributing/issues-pull-requests/","title":"Issues and Pull Requests","text":""},{"location":"contributing/issues-pull-requests/#issues","title":"Issues","text":"<p>Issue Tracker</p> <p>We use GitHub issues to report problems, request and track changes, and discuss future ideas. If you open an issue for a specific problem, please follow the template guides.</p>"},{"location":"contributing/issues-pull-requests/#pull-requests","title":"Pull Requests","text":"<p>We use the standard GitHub contribution cycle where all contributions are made via pull requests (including code owners!).</p> <ol> <li>Fork the repository and clone to your local machine.</li> <li>Create local changes.<ul> <li>Changes should conform to the style and testing guidelines, referenced   above.</li> <li>Preferred commit message format (source):<ul> <li>separate subject from body with a blank line,</li> <li>limit subject line to 50 characters,</li> <li>capitalize first word of subject line,</li> <li>do not end the subject line with a period,</li> <li>use the imperative mood for subject lines,</li> <li>include related issue numbers at end of subject line,</li> <li>wrap body at 72 characters, and</li> <li>use the body to explain what/why rather than how.   Example: <code>Fix concurrency bug in Store (#42)</code></li> </ul> </li> </ul> </li> <li>Push commits to your fork.<ul> <li>Please squash commits fixing mistakes to keep the git history clean.   For example, if commit \"b\" follows commit \"a\" and only fixes a small typo   from \"a\", please squash \"a\" and \"b\" into a single, correct commit.   This keeps the commit history readable and easier to search through when   debugging (e.g., git blame/bisect).</li> </ul> </li> <li>Open a pull request in this repository.<ul> <li>The pull request should include a description of the motivation for the   PR and included changes. A PR template is provided to guide this process.</li> </ul> </li> </ol>"},{"location":"contributing/releases/","title":"Releases","text":""},{"location":"contributing/releases/#release-timeline","title":"Release Timeline","text":"<p>Releases are created on an as-needed basis. Milestones are the Issue Tracker are used to track features to be included in upcoming releases.</p>"},{"location":"contributing/releases/#creating-releases","title":"Creating Releases","text":"<ol> <li>Choose the next version number, referred to as <code>{VERSION}</code> for the    rest of the instructions. Versioning follows semver    (<code>major.minor.patch</code>) with optional PEP-440    pre-release/post-release/dev-release segments. Major/minor/patch numbers    start at 0 and pre-release/post-release/dev-release segments start at 1.</li> <li>Update the version in <code>pyproject.toml</code> to <code>{VERSION}</code>.</li> <li>Commit and merge the version updates/changelogs into main.</li> <li>Tag the release commit and push (typically this is the commit updating the    version numbers).    <pre><code>$ git tag -s v{VERSION} -m \"FooBar v{VERSION}\"\n$ git push origin v{VERSION}\n</code></pre>    Note the version number is prepended by \"v\" for the tags so we can    distinguish release tags from non-release tags.</li> <li>Create a new release on GitHub using the tag. The title should be    <code>FooBar v{VERSION}</code>.</li> <li>Official release:<ol> <li>Use the \"Generate release notes\" option and set the previous tag as the previous official release tag. E.g., for <code>v0.4.1</code>, the previous release tag should be <code>v0.4.0</code> and NOT <code>v0.4.1a1</code>.</li> <li>Add an \"Upgrade Steps\" section at the top (see previous releases for examples).</li> <li>Review the generated notes and edit as needed. PRs are organized by tag, but some PRs will be missing tags and need to be moved from the \"Other Changes\" section to the correct section.</li> <li>Select \"Set as the latest release.\"</li> </ol> </li> <li>Unofficial release: (alpha/dev builds)<ol> <li>Do NOT generate release notes. The body can be along the lines of \"Development pre-prelease for <code>V{VERSION}</code>.\"</li> <li>Leave the previous tag as \"auto.\"</li> <li>Select \"Set as a pre-release.\"</li> </ol> </li> </ol>"},{"location":"contributing/style-guide/","title":"Style Guide","text":"<p>The Python code and docstring format mostly follows Google's Python Style Guide, but the pre-commit config is the authoritative source for code format compliance.</p> <p>Nits:</p> <ul> <li>Avoid imports in <code>__init__.py</code> (reduces the likelihood of circular imports).</li> <li>Prefer pure functions where possible.</li> <li>Define all class attributes inside <code>__init__</code> so all attributes are visible   in one place. Attributes that are defined later can be set as <code>None</code>   as a placeholder.</li> <li>Prefer f-strings (<code>f'name: {name}</code>) over string format   (<code>'name: {}'.format(name)</code>). Never use the <code>%</code> operator.</li> <li>Prefer typing.NamedTuple over collections.namedtuple.</li> <li>Use lower-case and no punctuation for log messages, but use upper-case and   punctuation for exception values.   <pre><code>logger.info(f'new connection opened to {address}')\nraise ValueError('Name must contain alphanumeric characters only.')\n</code></pre></li> <li>Document all exceptions that may be raised by a function in the docstring.</li> </ul>"},{"location":"guides/","title":"Guides","text":"<ul> <li>Examples</li> </ul>"},{"location":"guides/example/","title":"Example","text":"<p>Example Guide</p>"},{"location":"guides/example/#_1","title":"Example","text":"<p>Add your example guide here.</p>"}]}