{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Package Template Repo","text":"<p>Python package template repo that provides: - Package, examples, and testing layout. - GitHub PR and Issue templates. - Example docs with MKDocs and GitHub Pages. - CI framework with <code>pre-commit</code> and <code>tox</code>. - GitHub actions for running tests and publishing packages.</p> <p>This package setup was based on Anthony Sottile's project setup but deviates in some places (e.g., <code>pyproject.toml</code> and <code>ruff</code>).</p>"},{"location":"#setup-instructions","title":"Setup Instructions","text":"<ol> <li>Click the \"Use this template\" button at the top right of this page.</li> <li>Delete and directories you will not be using (commonly <code>docs/</code> if you do not want to use MKDocs or <code>examples/</code> if you will not have example code).</li> <li>Follow the instructions to create the new repo then clone your repo locally.</li> <li>The template uses \"foobar\" to indicate things that need to be changed.    Start by searching for all instances (<code>git grep foobar</code>) and changing them accordingly.</li> <li>Configure pre-commit:<ul> <li>Go to https://pre-commit.ci/ and enable pre-commit on your repo.</li> <li>Update the pre-commit badge URL in this README with your new badge URL.</li> </ul> </li> <li>Configure GitHub pages:<ul> <li>Go to the \"Pages\" section of your repository settings.</li> <li>Select \"Deploy from a branch\" and use the \"gh-pages\" branch.</li> </ul> </li> <li>Configure PyPI releases (if relevant):<ul> <li>Create a new API token for https://pypi.org/.</li> <li>Add the token as a GitHub actions secret (see the instructions here).</li> </ul> </li> <li>Delete this boilerplate stuff in the README.</li> <li>Commit and push changes.</li> </ol>"},{"location":"#github-configuration","title":"GitHub Configuration","text":"<p>I recommend making a few other changes to the repo's setting on GitHub. - In \"General\"   - Select/deselect features you need/don't need.   - Select \"Automatically delete head branches - In \"Branches\": enable branch protection on <code>main</code>.   - Check \"Require a pull request before merging\"   - Check \"Require status checks to pass before merging\"     - Check \"Require branches to be up to date before merging\"     - Set required checks (e.g., pre-commit.ci, tests, etc.)   - Check \"Do not allow bypassing the above settings\"</p>"},{"location":"#installation","title":"Installation","text":"<p>Install via pip: <pre><code>$ pip install foobar\n</code></pre></p> <p>For local development: <pre><code>$ tox --devenv venv -e py 310\n$ pre-commit install\n</code></pre> or <pre><code>$ pip install -e .\n</code></pre></p>"},{"location":"#additional-readme-sections","title":"Additional README Sections","text":"<p>...</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#getting-started-for-local-development","title":"Getting Started for Local Development","text":"<p>This package uses pre-commit and Tox for code checking and testing.</p> <pre><code>$ git clone https://github.com/foobar-user/foobar.git\n$ cd foobar\n$ tox --devenv venv -e py39\n$ . venv/bin/activate\n</code></pre> <p>Note that running Tox in a Conda environment will conflict with Tox's ability to find the correct Python versions.</p> <p>Pre-commit and Tox are used for continuous integration (locally and on GitHub).</p> <p>To use pre-commit, install the hook and then run against files. Note that sometimes pre-commit needs to be run multiple times to fix all the issues.</p> <pre><code>$ pre-commit install\n$ pre-commit run --all-files\n</code></pre> <p>The Python code and docstring format mostly follows the Google Python Style Guide, but the pre-commit config is the authoritative source for code format compliance.</p> <p>The entire CI workflow can be run with <code>$ tox</code>. This will test against multiple versions of Python and can be slow.</p> <p>Module-level unit-test are located in the <code>tests/</code> directory and its structure is intended to match that of <code>foobar/</code>. E.g. the tests for <code>foobar/foo.py</code> are located in <code>tests/foo_test.py</code>.</p> <pre><code># Run all tests in tests/\n$ tox -e py38\n# Run a specific test\n$ tox -e py38 -- tests/foo_test.py::test_bar_sum\n</code></pre>"},{"location":"contributing/#docs","title":"Docs","text":"<p>If code changes require an update to the documentation (e.g., for function signature changes, new modules, etc.), the documentation can be built using MKDocs.</p> <pre><code># Manually\n$ pip install -e .[docs]\n$ mkdocs build --strict  # Build only to site/index.html\n$ mkdocs server          # Serve locally\n# With tox\n$ tox -e docs\n</code></pre> <p>Docstrings are automatically generated, but it is recommended to check the generated docstrings to make sure details/links/etc. are correct.</p>"},{"location":"contributing/#issues","title":"Issues","text":"<p>We use GitHub issues to report problems, request and track changes, and discuss future ideas.</p> <p>If you open an issue for a specific problem, please follow the template guides.</p>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>We use the standard GitHub contribution cycle.</p> <ol> <li>Fork the repository and clone to your local machine</li> <li>Create local changes<ul> <li>Changes should conform to the style and testing guidelines, referenced above.</li> <li>Commit messages should start with a sentence describing the changes followed by a blank line then a detailed description of what changed and why.</li> </ul> </li> <li>Push commits to your fork<ul> <li>Please squash commits fixing mistakes to keep the git history clean.   For example, if commit \"b\" follows commit \"a\" and only fixes a small typo from \"a\", please squash \"a\" and \"b\" into a single, correct commit.</li> </ul> </li> <li>Open a pull request in this repository<ul> <li>The pull request should include a description of the motivation for the PR and included changes.   A PR template is provided to guide this process.</li> </ul> </li> </ol>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#foobar","title":"foobar","text":"<p>foobar can be used as follows.</p> <pre><code>from foobar import foo\nfoo.bar([1, 2, 3])\n# output: 6\n</code></pre>"},{"location":"get-started/","title":"Quick Start","text":"<p>foobar brief description.</p>"},{"location":"get-started/#overview","title":"Overview","text":"<p>foobar detailed overview.</p>"},{"location":"get-started/#installation","title":"Installation","text":"<pre><code>$ pip install foobar\n</code></pre> <p>Documentation on installing for local development is provided in Contributing.</p>"},{"location":"get-started/#usage","title":"Usage","text":"<p>foobar usage example.</p>"},{"location":"installation/","title":"Installation","text":"<pre><code>$ pip install foobar\n</code></pre>"},{"location":"known-issues/","title":"Known Issues","text":"<ul> <li>First known issue.</li> <li>Second known issue.</li> </ul>"},{"location":"guides/","title":"Guides","text":"<ul> <li>Examples</li> </ul>"},{"location":"guides/example/","title":"Example","text":"<p>Example Guide</p>"},{"location":"guides/example/#_1","title":"Example","text":"<p>Add your example guide here.</p>"},{"location":"reference/","title":"foobar","text":"<p>foobar package.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>foobar<ul> <li>foobar.foo</li> </ul> </li> </ul>"},{"location":"reference/foo/","title":"foobar.foo","text":"<p>foo module.</p>"},{"location":"reference/foo/#foobar.foo.bar","title":"bar","text":"<pre><code>bar(data: list[int] | None = None) -&gt; int | None\n</code></pre> <p>Sum list of integers.</p> <p>Parameters:</p> <ul> <li> data             (<code>list[int], None</code>)         \u2013 <p>optional list of integers (default: None).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int | None</code>         \u2013 <p><code>None</code> if <code>data=None</code> else the integer sum of <code>data</code>.</p> </li> </ul> Source code in <code>foobar/foo.py</code> <pre><code>def bar(data: list[int] | None = None) -&gt; int | None:\n\"\"\"Sum list of integers.\n    Args:\n        data (list[int], None): optional list of integers (default: None).\n    Returns:\n        `None` if `data=None` else the integer sum of `data`.\n    \"\"\"\nif data is not None:\nreturn sum(data)\nreturn None\n</code></pre>"}]}